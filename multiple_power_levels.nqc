#define turn_right(s)  SetPower(OUT_A+OUT_C,s);OnFwd(OUT_C);OnRev(OUT_A);
#define turn_left(s)  SetPower(OUT_A+OUT_C,s);OnFwd(OUT_A);OnRev(OUT_C);
#define forwards(s)  SetPower(OUT_A+OUT_C,s);OnFwd(OUT_A+OUT_C);
#define backwards(s)  SetPower(OUT_A+OUT_C,s);OnRev(OUT_A+OUT_C);
#define stop_engines() Off(OUT_A+OUT_C);

#define MINIMUM_POWER 0
#define LOW_POWER 2
#define MID_POWER 4
#define HIGH_POWER 6
#define MAXIMUM_POWER 7

#define SPEED MINIMUM_POWER

#define NO_MSG 0
#define STOP 1
#define FORWARD 2
#define BACK 3
#define LEFT 4
#define RIGHT 5

task main() {
  while(true) {
    ClearMessage();

    until (Message() != NO_MSG);
    if (Message() == STOP) {
	stop_engines(); 
    }
    if (Message() == FORWARD) {
	forwards(SPEED); 
    }
    if (Message() == BACK) {
	backwards(SPEED); 
    }
    if (Message() == LEFT) {
	turn_left(LOW_POWER); 
    }
    if (Message() == RIGHT) {
	turn_right(LOW_POWER); 
    }
    if (Message() >= 10 && Message() <20) {
        stop_engines();    
    }

    if (Message() >= 20 && Message() <30) {
	power = Message()%10;
	if (power > 7) {
	power=7;
	}
        forwards(power);    
    }
    if (Message() >= 30 && Message() <40) {
	power = Message()%10;
	if (power > 7) {
	power=7;
	}
        backwards(power);    
    }
    if (Message() >= 40 && Message() <50) {
	power = Message()%10;
	if (power > 7) {
	power=7;
	}
        turn_left(power);    
    }
    if (Message() >= 50 && Message() <60) {
	power = Message()%10;
	if (power > 7) {
	power=7;
	}
        turn_right(power);    
    }
  }
}
